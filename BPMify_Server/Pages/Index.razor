@page "/"
@using SpotifyAPI.Web
@using System.Runtime

@inject NavigationManager navManager




<h1>Hello, world!</h1>

@if (_isAuthed)
{

}
else
{
    <a class="btn btn-primary" @onclick="NavigateToSpotifyLogin">
        Login
    </a>
    @*<span>To get started: </span>
        <a href="@_authUri.">
            Login via Spotify
        </a>*@

}



<div>@temp</div>


@code{

    private Uri _authUri;

    private const string _clientId = "12b474707a0d41d08a6cd91bd49e56a6";
    private const string _response_type = "code";
    private Uri _redirectUri = new Uri("https://localhost:44359/");
    private string _spotifyScopes = @"user-read-currently-playing%20user-read-playback-state%20user-modify-playback-state%20streaming%20user-read-email%20user-read-private%20playlist-read-private";
    private string SpotifyAuthUrl = "";
    private string _verfier = "";
    private string _challenge = "";

    private bool _isAuthed = false;

    private string _code = "code";
    private Uri _uri = new Uri("https://localhost:44359//callback");


    private string temp = "";

    //Beim Initialisieren des Blazor-Components wird direkt eine Uri erstellt, die den User zur Spotify-Anmeldung navigiert.
    //Durch Klicken auf den Link "Login via Spotify" wird die Anmeldung angestoßen
    protected override void OnInitialized()
    {
        (_verfier, _challenge) = PKCEUtil.GenerateCodes(120);
        SpotifyAuthUrl = "https://accounts.spotify.com/en/authorize?client_id=" + _clientId + $"&response_type={_code}&redirect_uri={_redirectUri}&scope={_spotifyScopes}";




        GenerateLoginURI();
        //GetCallback(_code);
        if (!string.IsNullOrEmpty(_clientId))
        {
            var baseUri = navManager.ToAbsoluteUri(navManager.BaseUri);
            Console.WriteLine("BaseUri: " + baseUri.ToString());



            var loginRequest = new LoginRequest(baseUri, _clientId, LoginRequest.ResponseType.Code)
            {
                Scope = new[] { Scopes.UserReadCurrentlyPlaying, Scopes.UserReadPlaybackState, Scopes.UserModifyPlaybackState, Scopes.Streaming, Scopes.UserReadEmail, Scopes.UserReadPrivate, Scopes.PlaylistReadPrivate }
            };
            _authUri = loginRequest.ToUri();
            //temp = "AuthUri: " + _authUri;
        }
    }




    private void GenerateLoginURI()
    {


        //// Make sure "https://localhost:44359/" is in your applications redirect URIs!
        //var loginRequest = new LoginRequest(
        //  _redirectUri,
        //  "12b474707a0d41d08a6cd91bd49e56a6",
        //  LoginRequest.ResponseType.Code
        //)

        //{
        //    CodeChallengeMethod = "S256",
        //    CodeChallenge = challenge,
        //    Scope = new[] { Scopes.PlaylistReadPrivate, Scopes.PlaylistReadCollaborative }
        //};

        //_verfier = verifier;
        //_challenge = challenge;
        ////_code = LoginRequest.ResponseType.Code;
        //var _authUri = loginRequest.ToUri();
        ////temp = $"Verifier: {_verfier} ; Challenge: {_challenge}; Code: {LoginRequest.ResponseType.Code}; _authUri: {_authUri}";

        // Redirect user to uri via your favorite web-server or open a local browser window
    }

    // This method should be called from your web-server when the user visits "https://localhost:44359/"
    public async Task GetCallback(string code)
    {
        //_code = _uri.Query.Substring(6); //localhost:44304/?code=<code>
        //temp = $"Verifier: {_verfier} ; Challenge: {_challenge} ; Uri: {_uri}; Code: {code}";

        // Note that we use the verifier calculated above!
        var initialResponse = await new OAuthClient().RequestToken(
          new PKCETokenRequest(_clientId, code, _redirectUri, _verfier)
        );

        var spotify = new SpotifyClient(initialResponse.AccessToken);
        temp = $"Verifier: {_verfier} ; Challenge: {_challenge} ; Access Token: {initialResponse.AccessToken}";
        Console.WriteLine(initialResponse.AccessToken);
        _isAuthed = true;
        // Also important for later: response.RefreshToken
    }


    public void NavigateToSpotifyLogin()
    {
        navManager.NavigateTo(SpotifyAuthUrl);
        //navManager.NavigateTo(@"https://accounts.spotify.com/en/authorize?client_id=12b474707a0d41d08a6cd91bd49e56a6&response_type=code&redirect_uri=https:%2F%2Flocalhost:44359%2F&scope=user-read-currently-playing%20user-read-playback-state%20user-modify-playback-state%20streaming%20user-read-email%20user-read-private%20playlist-read-private");
    }


    /*
    ZIEL:
https://accounts.spotify.com/en/authorize?client_id=12b474707a0d41d08a6cd91bd49e56a6&response_type=code&redirect_uri=https:%2F%2Flocalhost:44359%2F&scope=user-read-currently-playing%20user-read-playback-state%20user-modify-playback-state%20streaming%20user-read-email%20user-read-private%20playlist-read-private
    */

}
