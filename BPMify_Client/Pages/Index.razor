@page "/"
@using SpotifyAPI.Web
@using System.Runtime
@using IdentityModel.Client
@using System.Security.Cryptography
@using System.Text
@using Microsoft.IdentityModel.Tokens
@using IdentityModel
@using Newtonsoft.Json
@using Helpers


@inject NavigationManager navManager
@inject HttpClient http
@inject ILocalStorageService localStorage




<h1>Hello, world!</h1>

@if (_isAuthed)
{

}
else
{
    <a class="btn btn-primary" @onclick="NavigateToSpotifyLogin">
        Login
    </a>
}



<div>@temp</div>
<span class="mt-4"></span>
<div class="btn btn-primary" @onclick="CheckForRecievedCode">Check for code</div>
<div class="btn btn-primary" @onclick="()=> GetLocalStorageData()">Get local storage</div>
<div class="btn btn-primary" @onclick="()=> RequestToken()">Request Token</div>
<div class="btn btn-primary" @onclick="()=> DeserializeResponseMessage()">Deserialize ResponseMessage</div>




@code{

    private Uri _authUri;

    private const string _clientId = "c5d79ae00f804be181a0551bda35a318";
    private const string _response_type = "code";
    private Uri _redirectUri = new Uri("https://localhost:44352/");
    private string _spotifyScopes = @"user-read-currently-playing%20user-read-playback-state%20user-modify-playback-state%20streaming%20user-read-email%20user-read-private%20playlist-read-private";
    private string SpotifyAuthUrl = "";
    private string _codeVerifier = "";
    private string _codeChallenge = "";


    private bool _isAuthed = false;
    private bool _codeRecieved = false;

    private string _authenticationState;
    private HttpResponseMessage _response;

    private string _code = "";
    private Uri _currentUri;

    private string temp = "";



    protected override async Task OnInitializedAsync()
    {
        CheckForRecievedCode();
        if (_authenticationState == SD.AuthState_ReceivedCode)
        {
            await GetLocalStorageData();
            await RequestToken();
        }
        else
        {

        }
    }


    private void CheckForRecievedCode()
    {
        _currentUri = new Uri(navManager.Uri);
        Console.WriteLine(_currentUri.Query);

        if (String.IsNullOrEmpty(_currentUri.Query) || !_currentUri.Query.Contains("?code="))
        {
            _authenticationState = SD.AuthState_Initialized;
        }
        else
        {
            _authenticationState = SD.AuthState_ReceivedCode;
        }
    }

    private async Task RequestToken()
    {

        _code = _currentUri.Query.Substring(6);//localhost:44359/?code=<code>
        temp = $"_code: {_currentUri.Query}; _verifier: {_codeVerifier} ";

        //http://ronaldrosiernet.azurewebsites.net/Blog/2013/12/07/posting_urlencoded_key_values_with_httpclient
        var client = new HttpClient();
        client.BaseAddress = new Uri("https://accounts.spotify.com");
        var request = new HttpRequestMessage(HttpMethod.Post, "/api/token");

        var keyValues = new List<KeyValuePair<string, string>>();
        keyValues.Add(new KeyValuePair<string, string>("client_id", _clientId));
        keyValues.Add(new KeyValuePair<string, string>("grant_type", "authorization_code"));
        keyValues.Add(new KeyValuePair<string, string>("code", _code));
        keyValues.Add(new KeyValuePair<string, string>("redirect_uri", _redirectUri.ToString()));
        //_verfier must be storaged locally
        keyValues.Add(new KeyValuePair<string, string>("code_verifier", _codeVerifier));

        request.Content = new FormUrlEncodedContent(keyValues);
        Console.WriteLine("Send token request");
        Console.WriteLine(keyValues.ToString());
        _response = await client.SendAsync(request);

        Console.WriteLine("Start reading response string");

        //Console.WriteLine(ReadResponse(response));

        await ReadResponseMessage();


        Console.WriteLine("Reading response string ended");
    }

    public async Task ReadResponseMessage()
    {
        Console.WriteLine(await _response.Content.ReadAsStringAsync());
    }

    public async Task NavigateToSpotifyLogin()
    {
        //_verfier and _challenge must be storaged locally
        GenerateCodeAndChallenge();
        SpotifyAuthUrl = "https://accounts.spotify.com/en/authorize?client_id=" + _clientId + $"&response_type=code&redirect_uri={_redirectUri}&scope={_spotifyScopes}&code_challenge={_codeChallenge}&code_challenge_method=S256";
        navManager.NavigateTo(SpotifyAuthUrl);

    }

    public async Task GenerateCodeAndChallenge()
    {
        //https://stackoverflow.com/questions/26353710/how-to-achieve-base64-url-safe-encoding-in-c
        //https://www.scottbrady91.com/OpenID-Connect/ASPNET-Core-using-Proof-Key-for-Code-Exchange-PKCE
        //needed @using-Statements: @using System.Security.Cryptography @using System.Textusing @using Microsoft.IdentityModel.Tokensusing @using IdentityModel

        // generate code_verifier
        _codeVerifier = CryptoRandom.CreateUniqueId(32);

        // store codeVerifier for later use
        //context.Properties.Items.Add("code_verifier", codeVerifier);

        char[] padding = { '=' };

        using (var sha256 = SHA256.Create())
        {
            var challengeBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(_codeVerifier));
            _codeChallenge = Base64UrlEncoder.Encode(challengeBytes);
        }

        List<string> CodeAndChallenge = new List<string>
    {
            _codeVerifier,
            _codeChallenge
        };

        await localStorage.SetItemAsync(SD.Local_PkceData, CodeAndChallenge);
    }

    private async Task GetLocalStorageData()
    {
        var rawLocalPkceData = await localStorage.GetItemAsync<string>(Helpers.SD.Local_PkceData);
        List<string> listedLocalPkceData = JsonConvert.DeserializeObject<List<string>>(rawLocalPkceData);//https://www.newtonsoft.com/json/help/html/DeserializeCollection.htm
        _codeVerifier = listedLocalPkceData.ElementAt(0);
        _codeChallenge = listedLocalPkceData.ElementAt(1);
    }


    private void GenerateLoginURI()
    {


        //// Make sure "https://localhost:44359/" is in your applications redirect URIs!
        //var loginRequest = new LoginRequest(
        //  _redirectUri,
        //  "12b474707a0d41d08a6cd91bd49e56a6",
        //  LoginRequest.ResponseType.Code
        //)

        //{
        //    CodeChallengeMethod = "S256",
        //    CodeChallenge = challenge,
        //    Scope = new[] { Scopes.PlaylistReadPrivate, Scopes.PlaylistReadCollaborative }
        //};

        //_verfier = verifier;
        //_challenge = challenge;
        ////_code = LoginRequest.ResponseType.Code;
        //var _authUri = loginRequest.ToUri();
        ////temp = $"Verifier: {_verfier} ; Challenge: {_challenge}; Code: {LoginRequest.ResponseType.Code}; _authUri: {_authUri}";

        // Redirect user to uri via your favorite web-server or open a local browser window
    }

    // This method should be called from your web-server when the user visits "https://localhost:44359/"
    //public async Task GetCallback(string code)
    //{
    //    //_code = _uri.Query.Substring(6); //localhost:44304/?code=<code>
    //    //temp = $"Verifier: {_verfier} ; Challenge: {_challenge} ; Uri: {_uri}; Code: {code}";

    //    // Note that we use the verifier calculated above!
    //    var initialResponse = await new OAuthClient().RequestToken(
    //      new PKCETokenRequest(_clientId, code, _redirectUri, _verfier)
    //    );

    //    var spotify = new SpotifyClient(initialResponse.AccessToken);
    //    temp = $"Verifier: {_verfier} ; Challenge: {_challenge} ; Access Token: {initialResponse.AccessToken}";
    //    Console.WriteLine(initialResponse.AccessToken);
    //    _isAuthed = true;
    //    // Also important for later: response.RefreshToken
    //}





    /*
    ZIEL:
https://accounts.spotify.com/en/authorize?client_id=12b474707a0d41d08a6cd91bd49e56a6&response_type=code&redirect_uri=https:%2F%2Flocalhost:44359%2F&scope=user-read-currently-playing%20user-read-playback-state%20user-modify-playback-state%20streaming%20user-read-email%20user-read-private%20playlist-read-private
    */

}
