@page "/"
@using System.Runtime
@using System.Security.Cryptography
@using System.Text
@using Microsoft.IdentityModel.Tokens
@using IdentityModel
@using Helpers
@using BPMify_Client.Services.IServices
@using Model


@inject IJSRuntime js
@inject NavigationManager navManager
@inject HttpClient http
@inject ILocalStorageService localStorage
@inject IPlayerService player

<h1>Hello, world!</h1>

@if (_isAuthed)
{

}
else
{
    <a class="btn btn-primary" @onclick="NavigateToSpotifyLogin">
        Login
    </a>
}


<div>@temp</div>
<span class="mb-4"></span>
<div class="btn btn-primary" @onclick="CheckForRecievedCode">Check for code</div>
<div class="btn btn-primary" @onclick="()=> GetLocalStorageData()">Get local storage</div>
<div class="btn btn-primary" @onclick="()=> RequestAccessTokenWithCode()">Request Access Token</div>
<div class="btn btn-primary" @onclick="()=> GetPlaybackControlAsync()">Take Control</div>
<div class="btn btn-primary" @onclick="()=> ResumePlaying()">Resume Playing</div>
<div class="btn btn-primary" @onclick="()=> PausePlaying()">Pause Playing</div>


@code{

    private Uri _authUri;

    private const string _clientId = "c5d79ae00f804be181a0551bda35a318";
    private const string _response_type = "code";
    private Uri _redirectUri = new Uri("https://localhost:44352/");
    private string _spotifyScopes = @"user-read-currently-playing%20user-read-playback-state%20user-modify-playback-state%20streaming%20user-read-email%20user-read-private%20playlist-read-private";
    private string SpotifyAuthUrl = "";
    private string _codeVerifier = "";
    private string _codeChallenge = "";


    private bool _isAuthed = false;
    private bool _codeRecieved = false;

    private PkceData _pkceData;//= new PkceData() { Challenge = "", RefreshToken ="", Verifier = ""};
    private string _authenticationState = SD.AuthState_Initialized;
    private HttpResponseMessage _response;
    private string _responseContent;
    private AccessTokenResponse _accessTokenRespond;



    private string _code = "";
    private Uri _currentUri;

    private string temp = "";

    //Fields for WebPlayer
    //private static SpotifyClient _spotify;//have to be static because of "GetPlaybackControlAsyncInvokeable()"
    private static string _bpmImfyDeviceId;
    private static string _playerState = SD.PlayerState_Unitialized;



    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        //var refreshtoken = await localStorage.GetItemAsync<string>(SD.Local_RefreshToken);
        try
        {
            _pkceData = await localStorage.GetItemAsync<PkceData>(SD.Local_PkceData);
            Console.WriteLine("Refreshtoken: " + _pkceData.RefreshToken);
            if (!string.IsNullOrEmpty(_pkceData.RefreshToken))
            {
                //RefreshToken found
                _authenticationState = SD.AuthState_RefreshTokenStored;
                Console.WriteLine("Refreshtoken: " + _pkceData.RefreshToken);
                await RequestAccessTokenWithRefreshToken();
            }
            else
            {
                //no RefreshToken found
                await CheckForRecievedCode();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task CheckForRecievedCode()
    {
        _currentUri = new Uri(navManager.Uri);
        Console.WriteLine(_currentUri.Query);

        if (String.IsNullOrEmpty(_currentUri.Query) || !_currentUri.Query.Contains("?code="))
        {
            _authenticationState = SD.AuthState_Initialized;
        }
        else
        {
            _authenticationState = SD.AuthState_ReceivedCode;
            await GetLocalStorageData();
            await RequestAccessTokenWithCode();
        }
    }

    private HttpRequestMessage BuildTokenRequest()
    {
        //http://ronaldrosiernet.azurewebsites.net/Blog/2013/12/07/posting_urlencoded_key_values_with_httpclient
        http.BaseAddress = new Uri("https://accounts.spotify.com");
        return new HttpRequestMessage(HttpMethod.Post, "/api/token");
    }

    private List<KeyValuePair<string, string>> BuildRequestContentWithAccessToken()
    {
        var keyValues = new List<KeyValuePair<string, string>>();
        keyValues.Add(new KeyValuePair<string, string>("client_id", _clientId));
        keyValues.Add(new KeyValuePair<string, string>("grant_type", "authorization_code"));
        keyValues.Add(new KeyValuePair<string, string>("code", _code));
        keyValues.Add(new KeyValuePair<string, string>("redirect_uri", _redirectUri.ToString()));
        //_verfier must be storaged locally
        keyValues.Add(new KeyValuePair<string, string>("code_verifier", _pkceData.Verifier));
        return keyValues;
    }

    private List<KeyValuePair<string, string>> BuildRequestContentWithRefreshToken()
    {
        var keyValues = new List<KeyValuePair<string, string>>();
        keyValues.Add(new KeyValuePair<string, string>("grant_type", "refresh_token"));
        keyValues.Add(new KeyValuePair<string, string>("refresh_token", _pkceData.RefreshToken));
        keyValues.Add(new KeyValuePair<string, string>("client_id", _clientId));
        return keyValues;
    }

    private async Task RequestAccessTokenWithRefreshToken()
    {
        var request = BuildTokenRequest();
        var keyValues = BuildRequestContentWithRefreshToken();
        request.Content = new FormUrlEncodedContent(keyValues);
        Console.WriteLine("Send token request");
        _response = await http.SendAsync(request);
        await HandleTokenRequestResponse();
    }

    private async Task RequestAccessTokenWithCode()
    {
        _code = _currentUri.Query.Substring(6);//localhost:44359/?code=<code>
        temp = $"_code: {_currentUri.Query}; _verifier: {_codeVerifier} ";

        var request = BuildTokenRequest();
        var keyValues = BuildRequestContentWithAccessToken();
        request.Content = new FormUrlEncodedContent(keyValues);
        Console.WriteLine("Send token request with code");
        _response = await http.SendAsync(request);
        await HandleTokenRequestResponse();
    }

    private async Task HandleTokenRequestResponse()
    {
        if (_response.IsSuccessStatusCode)//AccessToken received
        {
            _responseContent = await _response.Content.ReadAsStringAsync();
            _accessTokenRespond = System.Text.Json.JsonSerializer.Deserialize<AccessTokenResponse>(_responseContent);

            Console.WriteLine("AccessToken: " + _accessTokenRespond.access_token);
            Console.WriteLine("RefreshToken: " + _accessTokenRespond.refresh_token);
            _authenticationState = SD.AuthState_ReceivedAccessToken;
            Console.WriteLine("Reading response string ended");
            await player.InitializePlayer(_accessTokenRespond.access_token, js);

            //store refresh_token in local storage
            _pkceData.RefreshToken = _accessTokenRespond.refresh_token;
            await localStorage.SetItemAsync<PkceData>(SD.Local_PkceData, _pkceData);
        }
        else//no AccessToken received
        {
            Console.WriteLine("no AccessToken received");
        }
    }

    public async Task NavigateToSpotifyLogin()
    {
        //_verfier and _challenge must be storaged locally
        await GenerateCodeAndChallenge();
        SpotifyAuthUrl = "https://accounts.spotify.com/en/authorize?client_id=" + _clientId + $"&response_type=code&redirect_uri={_redirectUri}&scope={_spotifyScopes}&code_challenge={_codeChallenge}&code_challenge_method=S256";
        navManager.NavigateTo(SpotifyAuthUrl);

    }

    public async Task GenerateCodeAndChallenge()
    {
        //https://stackoverflow.com/questions/26353710/how-to-achieve-base64-url-safe-encoding-in-c
        //https://www.scottbrady91.com/OpenID-Connect/ASPNET-Core-using-Proof-Key-for-Code-Exchange-PKCE
        //needed @using-Statements: @using System.Security.Cryptography @using System.Textusing @using Microsoft.IdentityModel.Tokensusing @using IdentityModel

        // generates code_verifier
        _codeVerifier = CryptoRandom.CreateUniqueId(32);

        char[] padding = { '=' };

        using (var sha256 = SHA256.Create())
        {
            var challengeBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(_codeVerifier));
            _codeChallenge = Base64UrlEncoder.Encode(challengeBytes);
        }
        _pkceData = new PkceData() { Challenge = _codeChallenge, Verifier = _codeVerifier, RefreshToken = "" };
        //following three lines create an instanciating error
        //_pkceData.Challenge = _codeChallenge;
        //_pkceData.Verifier = _codeVerifier;
        //_pkceData.RefreshToken = "";

        await localStorage.SetItemAsync<PkceData>(SD.Local_PkceData, _pkceData);

    }

    private async Task GetLocalStorageData()
    {
        _pkceData = await localStorage.GetItemAsync<PkceData>(Helpers.SD.Local_PkceData);
    }

    public async Task GetPlaybackControlAsync()
    {
        if (_playerState == SD.PlayerState_PlayerReady)
        {
            await player.TransferPlayback(_bpmImfyDeviceId);
        }
        else
        {
            Console.WriteLine("Player is not ready");
        }
    }

    private async Task ResumePlaying()
    {
        await player.Resume();
        //await js.InvokeVoidAsync("Resume");
    }

    private async Task PausePlaying()
    {
        await player.Pause();
        //await js.InvokeVoidAsync("Pause");
    }

    [JSInvokable]
    public static void SetDeviceId(string deviceId)
    {
        _bpmImfyDeviceId = deviceId;
        _playerState = SD.PlayerState_PlayerReady;
        Console.WriteLine("Player ready");
    }
}
