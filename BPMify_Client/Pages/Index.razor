@page "/"
@using System.Runtime
@using System.Security.Cryptography
@using System.Text
@using Microsoft.IdentityModel.Tokens
@using IdentityModel
@using Helpers
@using BPMify_Client.Services.IServices
@using Model
@using BPMify_Client.Services

@inject ILocalStorageService localStorage
@inject IPlayerService player
@inject ISpotifyAuthenticationService authService
@inject IJSRuntime js
@inject PlayerStateManager stateManager

<h1>Hello, world!</h1>

@if (_authState == SD.PlayerState_PlayerNotInitialized)
{
    <a class="btn btn-primary" @onclick="authService.NavigateToSpotifyLogin">
        Login
    </a>
}
else if (_authState == SD.PlayerState_PlayerReady || player.PlayStatus())
{
    <div class="btn btn-primary" @onclick="() => player.Resume()">Resume Playing</div>
    <div class="btn btn-primary" @onclick="() => player.Pause()">Pause Playing</div>
}
else
{

    <div>Loading... </div>
}

<div class="btn btn-primary" @onclick="() => GetCurrentPlayerState()">GetCurrentPlayerState</div>


@*<span class="mb-4"></span>
    <div class="btn btn-primary" @onclick="authService.CheckForRecievedCode">Check for code</div>
    <div class="btn btn-primary" @onclick="()=> authService.GetLocalStorageData()">Get local storage</div>
    <div class="btn btn-primary" @onclick="()=> authService.RequestAccessTokenWithCode()">Request Access Token</div>*@



@code{
    public string _authState = "";
    private static DotNetObjectReference<Index> _objRef;
    private string _playerState { get; set; }
    private PlayerStateManager _stateManager;

    //public event EventHandler PlayerStateHasChanged;//Call a method in component which call StateHasChangedMethod

    protected override async Task OnInitializedAsync()
    {
        _stateManager = stateManager;
        _stateManager.PlayerStateHasChanged += UpdateDom;
        if (!player.PlayStatus())
        {
            //if player is not playing
            _authState = SD.PlayerState_TryToAuthenticate;
            _objRef = DotNetObjectReference.Create(this);
            var result = await js.InvokeAsync<string>("SetIndexComponentRef", _objRef);

            await authService.CheckAuthenticationState();
            _authState = authService.GetAuthState();
            Console.WriteLine(_authState);
        }

    }

    public async Task GetCurrentPlayerState()
    {
        await js.InvokeVoidAsync("GetCurrentState");
    }

    [JSInvokable]
    public async Task TransferPlayback(string deviceId)
    {
        _authState = SD.PlayerState_PlayerReady;
        StateHasChanged();
        Console.WriteLine("Rerendered");
        await player.TransferPlayback(deviceId);
        //await player.Resume();
    }

    public void UpdateDom(object sender, NewStateEventArgs e)
    {
        _playerState = e.NewState;
        StateHasChanged();
    }

}
