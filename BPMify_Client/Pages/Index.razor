@page "/"
@using SpotifyAPI.Web
@using System.Runtime
@using System.Security.Cryptography
@using System.Text
@using Microsoft.IdentityModel.Tokens
@using IdentityModel
@using Newtonsoft.Json
@using Helpers
@using BPMify_Client.Services.IServices
@using Model


@inject IJSRuntime js
@inject NavigationManager navManager
@inject HttpClient http
@inject ILocalStorageService localStorage
@inject IPlayerService player




<h1>Hello, world!</h1>

@if (_isAuthed)
{

}
else
{
    <a class="btn btn-primary" @onclick="NavigateToSpotifyLogin">
        Login
    </a>
}



<div>@temp</div>
<span class="mb-4"></span>
<div class="btn btn-primary" @onclick="CheckForRecievedCode">Check for code</div>
<div class="btn btn-primary" @onclick="()=> GetLocalStorageData()">Get local storage</div>
<div class="btn btn-primary" @onclick="()=> RequestAccessTokenWithCode()">Request Access Token</div>
<div class="btn btn-primary" @onclick="()=> GetPlaybackControlAsync()">Take Control</div>
<div class="btn btn-primary" @onclick="()=> ResumePlaying()">ResumePlaying</div>







@code{

    private Uri _authUri;

    private const string _clientId = "c5d79ae00f804be181a0551bda35a318";
    private const string _response_type = "code";
    private Uri _redirectUri = new Uri("https://localhost:44352/");
    private string _spotifyScopes = @"user-read-currently-playing%20user-read-playback-state%20user-modify-playback-state%20streaming%20user-read-email%20user-read-private%20playlist-read-private";
    private string SpotifyAuthUrl = "";
    private string _codeVerifier = "";
    private string _codeChallenge = "";


    private bool _isAuthed = false;
    private bool _codeRecieved = false;

    private PkceData _pkceData;//= new PkceData() { Challenge = "", RefreshToken ="", Verifier = ""};
    private string _authenticationState = SD.AuthState_Initialized;
    private HttpResponseMessage _response;
    private string _responseContent;
    private AccessTokenResponse _accessTokenRespond;

    private string _code = "";
    private Uri _currentUri;

    private string temp = "";

    //Fields for WebPlayer
    private static SpotifyClient _spotify;//have to be static because of "GetPlaybackControlAsyncInvokeable()"
    private static string _bpmImfyDeviceId;
    private static string _playerState = SD.PlayerState_Unitialized;



    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        //var refreshtoken = await localStorage.GetItemAsync<string>(SD.Local_RefreshToken);
        try
        {
            _pkceData = await localStorage.GetItemAsync<PkceData>(SD.Local_PkceData);
            Console.WriteLine("Refreshtoken: " + _pkceData.RefreshToken);
            if (!string.IsNullOrEmpty(_pkceData.RefreshToken))
            {
                //RefreshToken found
                _authenticationState = SD.AuthState_RefreshTokenStored;
                Console.WriteLine("Refreshtoken: " + _pkceData.RefreshToken);
                await RequestAccessTokenWithRefreshToken();
            }
            else
            {
                //no RefreshToken found
                await CheckForRecievedCode();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);

        }
        //await GenerateCodeAndChallenge();
        //await CheckForRecievedCode();


    }

    private async Task CheckForRecievedCode()
    {
        _currentUri = new Uri(navManager.Uri);
        Console.WriteLine(_currentUri.Query);

        if (String.IsNullOrEmpty(_currentUri.Query) || !_currentUri.Query.Contains("?code="))
        {
            _authenticationState = SD.AuthState_Initialized;
        }
        else
        {
            _authenticationState = SD.AuthState_ReceivedCode;
            await GetLocalStorageData();
            await RequestAccessTokenWithCode();
        }


    }

    private HttpRequestMessage BuildTokenRequest()
    {
        //http://ronaldrosiernet.azurewebsites.net/Blog/2013/12/07/posting_urlencoded_key_values_with_httpclient
        http.BaseAddress = new Uri("https://accounts.spotify.com");
        return new HttpRequestMessage(HttpMethod.Post, "/api/token");
    }

    private List<KeyValuePair<string, string>> BuildRequestContentWithAccessToken()
    {
        var keyValues = new List<KeyValuePair<string, string>>();
        keyValues.Add(new KeyValuePair<string, string>("client_id", _clientId));
        keyValues.Add(new KeyValuePair<string, string>("grant_type", "authorization_code"));
        keyValues.Add(new KeyValuePair<string, string>("code", _code));
        keyValues.Add(new KeyValuePair<string, string>("redirect_uri", _redirectUri.ToString()));
        //_verfier must be storaged locally
        keyValues.Add(new KeyValuePair<string, string>("code_verifier", _pkceData.Verifier));
        return keyValues;
    }

    private List<KeyValuePair<string, string>> BuildRequestContentWithRefreshToken()
    {
        var keyValues = new List<KeyValuePair<string, string>>();
        keyValues.Add(new KeyValuePair<string, string>("grant_type", "refresh_token"));
        keyValues.Add(new KeyValuePair<string, string>("refresh_token", _pkceData.RefreshToken));
        keyValues.Add(new KeyValuePair<string, string>("client_id", _clientId));
        return keyValues;
    }

    private async Task RequestAccessTokenWithRefreshToken()
    {
        var request = BuildTokenRequest();
        var keyValues = BuildRequestContentWithRefreshToken();
        request.Content = new FormUrlEncodedContent(keyValues);
        Console.WriteLine("Send token request");
        _response = await http.SendAsync(request);
        await HandleTokenRequestResponse();
    }

    private async Task RequestAccessTokenWithCode()
    {

        _code = _currentUri.Query.Substring(6);//localhost:44359/?code=<code>
        temp = $"_code: {_currentUri.Query}; _verifier: {_codeVerifier} ";

        var request = BuildTokenRequest();
        var keyValues = BuildRequestContentWithAccessToken();
        request.Content = new FormUrlEncodedContent(keyValues);
        Console.WriteLine("Send token request with code");
        _response = await http.SendAsync(request);
        await HandleTokenRequestResponse();
    }

    private async Task HandleTokenRequestResponse()
    {
        if (_response.IsSuccessStatusCode)//AccessToken received
        {
            _responseContent = await _response.Content.ReadAsStringAsync();
            _accessTokenRespond = System.Text.Json.JsonSerializer.Deserialize<AccessTokenResponse>(_responseContent);

            Console.WriteLine("AccessToken: " + _accessTokenRespond.access_token);
            Console.WriteLine("RefreshToken: " + _accessTokenRespond.refresh_token);
            _authenticationState = SD.AuthState_ReceivedAccessToken;
            Console.WriteLine("Reading response string ended");
            //await InitializePlayer(_accessTokenRespond.access_token);
            //_spotify = new SpotifyClient(_accessTokenRespond.access_token);
            player.InitializePlayer(_accessTokenRespond.access_token);

            //store refresh_token in local storage
            _pkceData.RefreshToken = _accessTokenRespond.refresh_token;
            await localStorage.SetItemAsync<PkceData>(SD.Local_PkceData, _pkceData);

            await js.InvokeVoidAsync("InitializePlayer", _accessTokenRespond.access_token);// WEB SDK Player initialisieren
        }
        else//no AccessToken received
        {
            Console.WriteLine("no AccessToken received");
        }
    }

    public async Task NavigateToSpotifyLogin()
    {
        //_verfier and _challenge must be storaged locally
        await GenerateCodeAndChallenge();
        SpotifyAuthUrl = "https://accounts.spotify.com/en/authorize?client_id=" + _clientId + $"&response_type=code&redirect_uri={_redirectUri}&scope={_spotifyScopes}&code_challenge={_codeChallenge}&code_challenge_method=S256";
        navManager.NavigateTo(SpotifyAuthUrl);

    }

    public async Task GenerateCodeAndChallenge()
    {
        //https://stackoverflow.com/questions/26353710/how-to-achieve-base64-url-safe-encoding-in-c
        //https://www.scottbrady91.com/OpenID-Connect/ASPNET-Core-using-Proof-Key-for-Code-Exchange-PKCE
        //needed @using-Statements: @using System.Security.Cryptography @using System.Textusing @using Microsoft.IdentityModel.Tokensusing @using IdentityModel

        // generates code_verifier
        _codeVerifier = CryptoRandom.CreateUniqueId(32);

        char[] padding = { '=' };

        using (var sha256 = SHA256.Create())
        {
            var challengeBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(_codeVerifier));
            _codeChallenge = Base64UrlEncoder.Encode(challengeBytes);
        }
        _pkceData = new PkceData() { Challenge = _codeChallenge, Verifier = _codeVerifier, RefreshToken = "" };
        //following three lines create an instanciating error
        //_pkceData.Challenge = _codeChallenge;
        //_pkceData.Verifier = _codeVerifier;
        //_pkceData.RefreshToken = "";

        await localStorage.SetItemAsync<PkceData>(SD.Local_PkceData, _pkceData);

        //List<string> CodeAndChallenge = new List<string>
        //{
        //    _codeVerifier,
        //    _codeChallenge
        //};

        //await localStorage.SetItemAsync(SD.Local_PkceData, CodeAndChallenge);


    }

    private async Task GetLocalStorageData()
    {
        _pkceData = await localStorage.GetItemAsync<PkceData>(Helpers.SD.Local_PkceData);
        //List<string> listedLocalPkceData = JsonConvert.DeserializeObject<List<string>>(rawLocalPkceData);//https://www.newtonsoft.com/json/help/html/DeserializeCollection.htm
        //_codeVerifier = listedLocalPkceData.ElementAt(0);
        //_codeChallenge = listedLocalPkceData.ElementAt(1);
    }

    public async Task GetPlaybackControlAsync()
    {
        if (_playerState == SD.PlayerState_PlayerReady)
        {
            await player.TransferPlayback(_bpmImfyDeviceId);
        }
        else
        {
            Console.WriteLine("Player is not ready");
        }
    }


    [JSInvokable]
    public static void GetPlaybackControlAsyncInvokeable(string deviceId)
    {
        _bpmImfyDeviceId = deviceId;
        _playerState = SD.PlayerState_PlayerReady;
        Console.WriteLine("Player ready");
        //Console.WriteLine("DeviceID: " + deviceId);
        //PlayerTransferPlaybackRequest request = new PlayerTransferPlaybackRequest(new List<string>() { deviceId });
        //await _spotify.Player.TransferPlayback(request);

    }

    private async Task InitializePlayer(string token)
    {
        await js.InvokeVoidAsync("InitializePlayer", token);
    }

    private async Task ResumePlaying()
    {
        await js.InvokeVoidAsync("Resume");
    }

    /*
    async Task GetPlaybackControlAsync()
    {
        var player = new SpotifyClient(_accessTokenRespond.access_token);
        player.Player
        var deviceResponse = await _spotify.Player.GetAvailableDevices();//Gibt eine List mit allen Geräten zurück, die verfügbar sind
        Console.WriteLine("Analyze response");

        Device lamalightsDevice;

        try
        {
            lamalightsDevice = deviceResponse.Devices.First(d => d.Name == "Lamalights");//Sucht das "Gerät" Lamalights. In dem Fall der in SpotifySDK.js initialisierten Player
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception: " + e.ToString());
            throw;
        }

        Console.WriteLine("Name: " + lamalightsDevice.Name + " ID: " + lamalightsDevice.Id + " IsActive: " + lamalightsDevice.IsActive.ToString());
        _lamalightsDeviceId = lamalightsDevice.Id;
        PlayerTransferPlaybackRequest request = new PlayerTransferPlaybackRequest(new List<string>() { _lamalightsDeviceId });
        await _spotify.Player.TransferPlayback(request);//Transfer anfragen
                                                        //Error handling ErrorResponse error = _spotify.TransferPlayback("XXXX-XXXX-XXXX-XXXX");
                                                        //await GetMetadataAsync();
                                                        //await GetUsersPlaylistsAsync();
                                                        //request.Play = true; //Nach dem Playback Transfer wird in Lamalights die Wiedergabe übernommen
                                                        //await js.InvokeVoidAsync("Resume");
        await ResumePlaying();
    }


    */




    private void GenerateLoginURI()
    {


        //// Make sure "https://localhost:44359/" is in your applications redirect URIs!
        //var loginRequest = new LoginRequest(
        //  _redirectUri,
        //  "12b474707a0d41d08a6cd91bd49e56a6",
        //  LoginRequest.ResponseType.Code
        //)

        //{
        //    CodeChallengeMethod = "S256",
        //    CodeChallenge = challenge,
        //    Scope = new[] { Scopes.PlaylistReadPrivate, Scopes.PlaylistReadCollaborative }
        //};

        //_verfier = verifier;
        //_challenge = challenge;
        ////_code = LoginRequest.ResponseType.Code;
        //var _authUri = loginRequest.ToUri();
        ////temp = $"Verifier: {_verfier} ; Challenge: {_challenge}; Code: {LoginRequest.ResponseType.Code}; _authUri: {_authUri}";

        // Redirect user to uri via your favorite web-server or open a local browser window
    }

    // This method should be called from your web-server when the user visits "https://localhost:44359/"
    //public async Task GetCallback(string code)
    //{
    //    //_code = _uri.Query.Substring(6); //localhost:44304/?code=<code>
    //    //temp = $"Verifier: {_verfier} ; Challenge: {_challenge} ; Uri: {_uri}; Code: {code}";

    //    // Note that we use the verifier calculated above!
    //    var initialResponse = await new OAuthClient().RequestToken(
    //      new PKCETokenRequest(_clientId, code, _redirectUri, _verfier)
    //    );

    //    var spotify = new SpotifyClient(initialResponse.AccessToken);
    //    temp = $"Verifier: {_verfier} ; Challenge: {_challenge} ; Access Token: {initialResponse.AccessToken}";
    //    Console.WriteLine(initialResponse.AccessToken);
    //    _isAuthed = true;
    //    // Also important for later: response.RefreshToken
    //}





    /*
    ZIEL:
https://accounts.spotify.com/en/authorize?client_id=12b474707a0d41d08a6cd91bd49e56a6&response_type=code&redirect_uri=https:%2F%2Flocalhost:44359%2F&scope=user-read-currently-playing%20user-read-playback-state%20user-modify-playback-state%20streaming%20user-read-email%20user-read-private%20playlist-read-private
    */

}
